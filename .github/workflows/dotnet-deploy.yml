# Nazwa workflow, która będzie widoczna w zakładce "Actions" na GitHubie
name: Deploy .NET API to Azure

# Konfiguracja triggera (wyzwalacza)
on:
  push:
    branches:
      - main  # Uruchom workflow po każdym push na gałąź main
  workflow_dispatch: # Umożliwia ręczne uruchomienie workflow z interfejsu GitHub

# Definicja zmiennych środowiskowych używanych w całym workflow
env:
  AZURE_WEBAPP_NAME: bartek-ecommerceapi-d0h5dcgfdzephvgt   # <-- WAŻNE: Wpisz tutaj unikalną nazwę swojej aplikacji z Azure!
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'ECommerceApi.csproj'

jobs:
  build-and-deploy:
    # Używamy najnowszej stabilnej wersji Ubuntu jako maszyny budującej
    runs-on: ubuntu-latest

    steps:
    # Krok 1: Pobranie kodu źródłowego z repozytorium
    - name: Checkout repository
      uses: actions/checkout@v4

    # Krok 2: Konfiguracja środowiska .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Krok 3: Zbudowanie projektu w konfiguracji Release
    - name: Build with dotnet
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release

    # Krok 4: Opublikowanie projektu (stworzenie paczki do wdrożenia)
    - name: Publish with dotnet
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ./publish

    # Krok 5: Wdrożenie aplikacji na Azure App Service
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.bartek-ecommerceapi-d0h5dcgfdzephvgt }}
        # Używamy sekretu, który skonfigurowaliśmy wcześniej w GitHub
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        # Ścieżka do paczki, którą stworzyliśmy w kroku "Publish"
        package: './publish'